// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

package demoproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Args struct {
	A                    int32    `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Args) Reset()         { *m = Args{} }
func (m *Args) String() string { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()    {}
func (*Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{0}
}

func (m *Args) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Args.Unmarshal(m, b)
}
func (m *Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Args.Marshal(b, m, deterministic)
}
func (m *Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Args.Merge(m, src)
}
func (m *Args) XXX_Size() int {
	return xxx_messageInfo_Args.Size(m)
}
func (m *Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Args proto.InternalMessageInfo

func (m *Args) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *Args) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Resp struct {
	R                    int32    `protobuf:"varint,1,opt,name=R,proto3" json:"R,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{1}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func init() {
	proto.RegisterType((*Args)(nil), "demoproto.Args")
	proto.RegisterType((*Resp)(nil), "demoproto.Resp")
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor_ca53982754088a9d) }

var fileDescriptor_ca53982754088a9d = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x49, 0xcd, 0xcd,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0xb1, 0xc1, 0x4c, 0x25, 0x25, 0x2e, 0x16,
	0xc7, 0xa2, 0xf4, 0x62, 0x21, 0x1e, 0x2e, 0x46, 0x47, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20,
	0x46, 0x47, 0x10, 0xcf, 0x49, 0x82, 0x09, 0xc2, 0x73, 0x52, 0x12, 0xe1, 0x62, 0x09, 0x4a, 0x2d,
	0x2e, 0x00, 0x89, 0x06, 0xc1, 0xd4, 0x04, 0x19, 0x65, 0x72, 0x71, 0xba, 0xa4, 0xe6, 0xe6, 0x07,
	0x80, 0x4d, 0xd4, 0xe3, 0xe2, 0xf0, 0x2d, 0xcd, 0x29, 0xc9, 0x2c, 0xc8, 0xa9, 0x14, 0xe2, 0xd7,
	0x83, 0x1b, 0xaf, 0x07, 0x32, 0x5b, 0x0a, 0x59, 0x00, 0x64, 0x90, 0x12, 0x83, 0x90, 0x0e, 0x17,
	0x9b, 0x4b, 0x66, 0x59, 0x66, 0x4a, 0x2a, 0x31, 0xaa, 0x9d, 0x98, 0xa2, 0x18, 0x92, 0xd8, 0xc0,
	0x22, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xbc, 0x59, 0xa6, 0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DemoProtoClient is the client API for DemoProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoProtoClient interface {
	Multiply(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Resp, error)
	Divide(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Resp, error)
}

type demoProtoClient struct {
	cc *grpc.ClientConn
}

func NewDemoProtoClient(cc *grpc.ClientConn) DemoProtoClient {
	return &demoProtoClient{cc}
}

func (c *demoProtoClient) Multiply(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/demoproto.DemoProto/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoProtoClient) Divide(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/demoproto.DemoProto/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoProtoServer is the server API for DemoProto service.
type DemoProtoServer interface {
	Multiply(context.Context, *Args) (*Resp, error)
	Divide(context.Context, *Args) (*Resp, error)
}

// UnimplementedDemoProtoServer can be embedded to have forward compatible implementations.
type UnimplementedDemoProtoServer struct {
}

func (*UnimplementedDemoProtoServer) Multiply(ctx context.Context, req *Args) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (*UnimplementedDemoProtoServer) Divide(ctx context.Context, req *Args) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}

func RegisterDemoProtoServer(s *grpc.Server, srv DemoProtoServer) {
	s.RegisterService(&_DemoProto_serviceDesc, srv)
}

func _DemoProto_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoProtoServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoproto.DemoProto/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoProtoServer).Multiply(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoProto_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoProtoServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoproto.DemoProto/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoProtoServer).Divide(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _DemoProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demoproto.DemoProto",
	HandlerType: (*DemoProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _DemoProto_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _DemoProto_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}
